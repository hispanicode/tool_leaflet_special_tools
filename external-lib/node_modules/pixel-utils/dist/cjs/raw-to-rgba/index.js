"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rawToRgba;

var _quickScale = require("quick-scale");

var _makeNoDataRgba = _interopRequireDefault(require("../make-no-data-rgba"));

var _convertSingle = _interopRequireDefault(require("./convert-single"));

var _convertDouble = _interopRequireDefault(require("./convert-double"));

var _convertDoubleAll = _interopRequireDefault(require("./convert-double-all"));

var _convertMultiband = _interopRequireDefault(require("./convert-multiband"));

var _convertMultibandAll = _interopRequireDefault(require("./convert-multiband-all"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rawToRgba({
  debug_level = 0,
  ranges,
  flip = false,
  new_no_data_value,
  no_data_strategy,
  no_range_value,
  no_range_value_strategy,
  old_no_data_value
}) {
  if (debug_level >= 1) console.log("[pixel-utils/raw-to-rgba] ranges:", ranges);
  const nbands = ranges.length;
  const new_range = [0 === new_no_data_value ? 1 : 0, 255 === new_no_data_value ? 254 : 255];
  if (debug_level >= 1) console.log("[pixel-utils/raw-to-rgba] new_range:", new_range);
  const options = {
    no_data_value: new_no_data_value,
    flip,
    no_range_value,
    no_range_value_strategy,
    round: true
  };
  if (debug_level >= 1) console.log("[pixel-utils/raw-to-rgba] options:", options);
  const scalefns = ranges.slice(0, 3).map(rng => (0, _quickScale.createScaleFunction)(rng, new_range, options));

  if (nbands === 1) {
    // @ts-ignore
    return _convertSingle.default.bind(null, old_no_data_value, (0, _makeNoDataRgba.default)(new_no_data_value), scalefns[0]);
  } else if (nbands === 2) {
    if (no_data_strategy === "all") {
      // @ts-ignore
      return _convertDoubleAll.default.bind(null, old_no_data_value, (0, _makeNoDataRgba.default)(new_no_data_value), ...scalefns);
    } else {
      // @ts-ignore
      return _convertDouble.default.bind(null, old_no_data_value, new_no_data_value, ...scalefns);
    }
  } else if (nbands >= 3) {
    if (no_data_strategy === "all") {
      // @ts-ignore
      return _convertMultibandAll.default.bind(null, old_no_data_value, (0, _makeNoDataRgba.default)(new_no_data_value), ...scalefns);
    } else {
      // @ts-ignore
      return _convertMultiband.default.bind(null, old_no_data_value, new_no_data_value, ...scalefns);
    }
  }

  throw Error("uh oh");
}