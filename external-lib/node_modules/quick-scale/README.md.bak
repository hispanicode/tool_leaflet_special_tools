# scalef
Create Fast Linear Scaling Functions Optimized for CPU Operations. Scale, Flip, and Round Numbers.

### install
```bash
npm install scalef
```

### basic usage
In this basic example, we scale values from a 16-bit image to an 8-bit RGB color space.
```js
import { create } from "scalef";

// the [min, max] values for a 16-bit image
const old_range = [0, 65536];

// the [min, max] values for an 8-bit RGB image
const new_range = [0, 255];

const scale = create(old_range, new_range);

// apply this scale function to a bunch of numbers
scale(65535); // highest possible value
255

scale(0); // lowest possible value
0

scale(32767); // value close to the middle
127.49805447470817
```

### advanced usages
We can round and do more advanced things by passing in an options object:
```js
const scale = create(old_range, new_range, {
  // flip the scale, so higher and lower values are reversed
  // the typical use case is if you want higher data values to appear
  // darker in an RGB(A) color space
  flip: true,

  // sometimes the difference between the min and max of a source range
  // will be zero, like when an image transparency band is all 255
  // if you'd like to provide a value to return in this case, set no_range_value
  no_range_value: -99,

  // if your starting range is zero and you don't set no_range_value,
  // then scalef will return the "highest", "lowest", or "middle" value of the new range
  // the default is to return the highest value of the new range
  no_range_value_strategy: "lowest",

  // a reserved value witholds a minimum or maxmimum value from the new range
  // the typical use case for this is if we want to reserve 0 as a no data value
  // in this example, the lowest value will be set to 1 because 0 is reserved
  reserved_value: 0,

  // round the result
  round: true
});

scale()
```